---
import { getCollection } from "astro:content";
import PostPreview from "../components/PostPreview.astro";
import Default from "../layouts/Default.astro";
import { cleanName } from "../lib";
interface Model {
  id: string;
  name: string;
  versions: Set<string>;
}
export async function getStaticPaths() {
  const posts = await getCollection("posts");

  const models: Record<string, Model> = {};
  for (const post of posts) {
    const [model] = post.slug.split("/");

    if (!models[model]) {
      models[model] = {
        id: model,
        name: cleanName(model),
        versions: new Set(""),
      };
    }

    if (post.data.version) {
      models[model].versions.add(post.data.version);
    }
  }
  const paths = [];
  for (const [id, model] of Object.entries(models)) {
    for (const version of model.versions) {
      paths.push({
        params: {
          model: `${id}_${version}`,
        },
        props: {
          model,
          version,
        },
      });
    }
    paths.push({
      params: {
        model: id,
      },
      props: {
        model,
      },
    });
  }
  return paths;
}

interface Props {
  model: {
    id: string;
    name: string;
    versions: Set<string>;
  };
  version?: string;
}

const { model, version } = Astro.props;

const posts = (
  await getCollection(
    "posts",
    (post) =>
      (!version || post.data.version === version) &&
      post.slug.startsWith(model.id + "/")
  )
).sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime());
---

<Default title={model.name}>
  <div>
    <h2>
      {model.name} Posts und
      <a class="text-center link" href={"/" + model.id + "/gallerie/"}
        >Gallerie</a
      >
    </h2>
    <div
      class="flex flex-col lg:flex-row items-center justify-center lg:gap-2 p-2 rounded-sm"
    >
      Versionen:
      <a
        class={`link ${
          !version ? "text-shadow shadow-neonGreen decoration-neonGreen" : ""
        }`}
        href={"/" + model.id}
      >
        {"Alle"}
      </a>
      {
        [...model.versions].map((modelVersion) => (
          <a
            class={`link ${
              modelVersion === version
                ? "text-shadow shadow-neonGreen decoration-neonGreen"
                : ""
            }`}
            href={`${model.id}_${modelVersion}`}
          >
            {modelVersion || "Alle"}
          </a>
        ))
      }
    </div>
  </div>
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
    {posts.map((fp) => <PostPreview post={fp} />)}
  </div>
</Default>
