---
import { Picture } from "@astrojs/image/components";
import { twSizes } from "../lib";
// import generateImage from internal.js
import type { ImageMetadata } from "astro";
interface Props {
  sizes?: {
    sm: number;
    md?: number;
    lg?: number;
  };
  src: string;
  className?: string;
  alt?: string;
  loading?: "eager" | "lazy";
}
const {
  sizes,
  src,
  className = "",
  loading = "lazy",
  alt = "",
} = Astro.props;


const imageGlob = await import.meta.glob("../../public/images/**/*")
let image = {...((await imageGlob['../../public'+src]()) as any).default as ImageMetadata}

const unsortedWidths = sizes
  ? ([sizes.sm, sizes.md, sizes.lg].filter((x) => x) as number[])
  : [image.width];
const widths = [...new Set(unsortedWidths.sort((a, b) => a - b))];

---
{
  !!sizes
  ? <>
    <Picture
      widths={widths}
      alt={alt}
      formats={["jpeg", "avif", "webp"]}
      quality={85}
      width={image.width}
      height={image.height}
      loading={loading}
      sizes={sizes ? twSizes(sizes) : ""}
      src={image}
      class={className}
    />
    <style is:global>
      picture {
        justify-content: center;
        display: flex;
        max-width: 100%;
        max-height: 100%;
      }
    </style>
  </>
  : <img {...image} alt={alt} loading={loading} class={className} />
  
}
