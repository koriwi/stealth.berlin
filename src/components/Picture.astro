---
import { Picture } from "@astrojs/image/components";
import { readFileSync, readdirSync } from 'fs';
import sharp from 'sharp';
import { twSizes } from "../lib";
// import generateImage from internal.js
import { generateImage } from "astro/dist/assets/internal"
interface Props {
  sizes?: {
    sm: number;
    md?: number;
    lg?: number;
  };
  src: string;
  className?: string;
  alt?: string;
  loading?: "eager" | "lazy";
}
const {
  sizes,
  src,
  className = "",
  loading = "lazy",
  alt = "Picture",
} = Astro.props;

// const imageSourcePath = new URL(`../../public${src}`, import.meta.url).href.slice(7);
// // add static image

const image = (await import("../../public"+src)).default;
// const imgblabla = astroImage.addStaticImage ? await generateImage({
//   allPages:{}, 
// },{src: imageSourcePath,},"dist"+astroImage.addStaticImage({src: imageSourcePath,})): imageSourcePath
// console.log(imgblabla)
// const imageBuffer = readFileSync(".");
// const {width, height, format} = await sharp(imageBuffer).metadata()
// const image: ImageMetadata = {width: width!, height: height!, format: format as InputFormat, src }

console.log(image)
const widths = sizes
  ? ([sizes.sm, sizes.md, sizes.lg].filter((x) => x) as number[])
  : [1];
for (let i = 0; i < 3 - widths.length; i++) {
  const fallback = widths[3 - widths.length - 1]!;
  widths.push(fallback);
}
---
{
  !!sizes
  ? <>
    <Picture
      widths={widths}
      alt={alt}
      formats={["jpeg", "avif", "webp"]}
      quality={85}
      width={image.width}
      height={image.height}
      loading={loading}
      sizes={sizes ? twSizes(sizes) : ""}
      src={image}
      class={className}
    />
    <style is:global>
      picture {
        justify-content: center;
        display: flex;
        max-width: 100%;
        max-height: 100%;
      }
    </style>
  </>
  : <img {...image} alt={alt} loading={loading} class={className} />
  
}
